package org.scottishtecharmy.soundscape.services

import android.content.Intent
import android.util.Log
import android.view.KeyEvent
import androidx.annotation.OptIn
import androidx.core.content.IntentCompat
import androidx.media3.common.util.UnstableApi
import androidx.media3.session.MediaSession

@UnstableApi
/** This callback class handles media button events generated by bluetooth headphones etc.
 * These are then mapped to specific Soundscape features.
 */
class SoundscapeMediaSessionCallback(val service : SoundscapeService):
    MediaSession.Callback {
    // Configure commands available to the controller in onConnect()
    @OptIn(UnstableApi::class)
    override fun onConnect(
        session: MediaSession,
        controller: MediaSession.ControllerInfo
    ): MediaSession.ConnectionResult {

        Log.e("SoundscapeMediaSession", "onConnect")
        val sessionCommands = MediaSession.ConnectionResult.DEFAULT_SESSION_COMMANDS
        return MediaSession.ConnectionResult.AcceptedResultBuilder(session)
            .setAvailableSessionCommands(sessionCommands)
            .build()
    }

    override fun onMediaButtonEvent(
        session: MediaSession,
        controllerInfo: MediaSession.ControllerInfo,
        intent: Intent
    ): Boolean {

        val keyEvent : KeyEvent? = IntentCompat.getParcelableExtra(
            intent,
            Intent.EXTRA_KEY_EVENT,
            KeyEvent::class.java
        )

        // So far I've only seen KEYCODE_MEDIA_PLAY_PAUSE, KEYCODE_MEDIA_PREVIOUS and
        // KEYCODE_MEDIA_NEXT, though that may be specific to my phone. The only event actually
        // handled for now is KEYCODE_MEDIA_NEXT.

        // The behaviour of the media buttons changes when a route is being played back. In that
        // case the buttons map to next/previous waypoint and muting audio.

        keyEvent?.let { event ->
            val decodedKey = when(event.keyCode) {
                KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE -> {
                    // ⏯ Play/Pause: Mute any current callouts and if the audio beacon is set, toggle the beacon audio.
                    service.routeMute()
                    "Play/Pause"
                }
                KeyEvent.KEYCODE_MEDIA_SKIP_FORWARD -> {
                    // ⏩ Skip Forward
                    if(!service.routeSkipNext()) {
                        // If there's no route playing, toggle auto callouts.
                        service.toggleAutoCallouts()
                    }
                    "Skip forward"
                }
                KeyEvent.KEYCODE_MEDIA_NEXT -> {
                    // ⏭ Next
                    if(!service.routeSkipNext()) {
                        // If there's no route playing, callout My Location.
                        service.myLocation()
                    }
                    "Next"
                }

                KeyEvent.KEYCODE_MEDIA_PREVIOUS -> {
                    // ⏮ Previous
                    if(!service.routeSkipPrevious()) {
                        // TODO: : Repeat last callout.
                    }
                    "Previous"
                }
                KeyEvent.KEYCODE_MEDIA_SKIP_BACKWARD -> {
                    // ⏪ Skip Backward
                    if(!service.routeSkipPrevious()) {
                        // If there's no route playing, callout around me
                        service.whatsAroundMe()
                    }
                    "Skip backward"
                }

                KeyEvent.KEYCODE_MEDIA_PLAY -> "Play"
                KeyEvent.KEYCODE_MEDIA_FAST_FORWARD -> "Fast forward"
                KeyEvent.KEYCODE_MEDIA_REWIND -> "Rewind"
                else -> return false
            }
            Log.e("SoundscapeMediaSession", "onMediaButtonEvent ${event.keyCode} $decodedKey")
            return true
        }
        return false
    }
}